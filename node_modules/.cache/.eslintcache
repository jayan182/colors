[{"/Users/jayan/React/colors/src/index.js":"1","/Users/jayan/React/colors/src/reportWebVitals.js":"2","/Users/jayan/React/colors/src/App.js":"3"},{"size":535,"mtime":1678290143548,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1678290143549,"results":"6","hashOfConfig":"5"},{"size":9122,"mtime":1678344210557,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1gbg5r9",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"18"},"/Users/jayan/React/colors/src/index.js",[],[],[],"/Users/jayan/React/colors/src/reportWebVitals.js",[],[],"/Users/jayan/React/colors/src/App.js",["19","20"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Table from 'react-bootstrap/Table';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Button from 'react-bootstrap/Button';\n\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\nimport Form from 'react-bootstrap/Form';\n\nimport Card from 'react-bootstrap/Card';\n\nimport Toast from 'react-bootstrap/Toast';\nimport ToastContainer from 'react-bootstrap/ToastContainer'\n\nimport {useState, useEffect} from 'react';\n\nfunction App() {\n  const [colors, setColors] = useState([]);\n  const [colorData, setColorData] = useState([]);\n  const [selectedColor, setSelectedColor] = useState([]);\n  const [primaryColor, setPrimaryColor] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [mode, setMode] = useState('');\n  let selectColorLength = Object.values(selectedColor).length;\n\n  useEffect(()=>{\n    let tempColor = localStorage.getItem('colors');\n    if(tempColor !== null){\n      setColors(JSON.parse(tempColor));\n      filterPrimaryColors(JSON.parse(tempColor));\n    }\n  },[]);\n\n  const filterPrimaryColors = (tempColor) => {\n    if(Object.values(tempColor).length > 0){\n      let primary = Object.values(tempColor).filter((tmp)=>{return tmp.is_popular === true});\n\n      setPrimaryColor(primary);\n    }\n  }\n  \n  const handleChange = (e) => {\n    let name = e.target.name;\n    let checked = e.target.checked;\n    let value = e.target.value;\n    \n    if(name === \"is_popular\")\n      setColorData(values => ({...values, [name]: checked}));\n    if(name !== \"is_popular\")\n      setColorData(values => ({...values, [name]: value}));\n  }\n\n  const registerColor = () => {\n    setLoading(true);\n    let tmpColor = [...colors];\n    let index = tmpColor.findIndex((tmp)=>{return tmp.color_name === selectedColor.color_name});\n\n    if(index === -1){\n      if(!colorData.hasOwnProperty('is_popular')){\n        setColorData(values => ({...values, ['is_popular']: false}));\n      }\n      let tempColor = [...colors, colorData];\n      localStorage.setItem('colors',JSON.stringify(tempColor));\n      setColors(colorData);\n      setMode('create');\n    }\n    else{\n      tmpColor[index] = {...colorData};\n      localStorage.setItem('colors',JSON.stringify(tmpColor));\n      setColors(tmpColor);\n      setMode('update');\n    }\n\n    setTimeout(()=>{\n      setMode('');\n      setLoading(false);\n    },[5000]);\n  }\n\n  const editColor = (offset) => {\n    setSelectedColor(offset);\n    setColorData(offset);\n  }\n\n  const DeleteColor = (offset) => {\n    setLoading(true);\n    let tmpColor = [...colors];\n    let index = tmpColor.findIndex((tmp)=>{return tmp.color_name === offset});\n\n    if(index !== -1){\n      tmpColor.splice(index, 1);\n      localStorage.setItem('colors',JSON.stringify(tmpColor));\n      filterPrimaryColors(tmpColor);\n      setColors(tmpColor);\n      setMode('delete');\n    }\n\n    setTimeout(()=>{\n      setMode('');\n      setLoading(false);\n    },[5000]);\n  } \n\n  const displayToast = (mode) => {\n    switch(mode){\n      case 'create':\n        return (\n          <ToastContainer position=\"top-end\">\n            <Toast\n              className=\"d-inline-block m-1\"\n              bg={\"success\"}\n            >\n              <Toast.Header>\n                <strong className=\"me-auto\">Color added successfully!</strong>\n              </Toast.Header>\n            </Toast>\n            </ToastContainer>\n        );\n      case 'update':\n          return (\n            <ToastContainer position=\"top-end\">\n              <Toast\n                className=\"d-inline-block m-1\"\n                bg={\"info\"}\n              >\n                <Toast.Header>\n                  <strong className=\"me-auto\">Color updated successfully!</strong>\n                </Toast.Header>\n              </Toast>\n            </ToastContainer>\n          );\n      case 'delete':\n        return (\n          <ToastContainer position=\"top-end\">\n            <Toast\n              className=\"d-inline-block m-1\"\n              bg={\"danger\"} \n            >\n              <Toast.Header>\n                <strong className=\"me-auto\">Color deleted successfully!</strong>\n              </Toast.Header>\n            </Toast>\n          </ToastContainer>\n        );\n    }\n  }\n  \n  return (\n    <div>\n      {\n        loading === true &&\n          displayToast(mode)\n      }\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand href=\"#home\">Tours of Colors</Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      {\n        Object.values(primaryColor).length > 0 &&\n          <Card>\n            <Card.Body>\n              <Container fluid>\n                <Row>\n                  <Col \n                    sm={{span: 6, offset: 5}}\n                    lg={{span: 6, offset: 5}}\n                    md={{span: 6, offset: 5}}\n                  >\n                    <h2>Primary Colors</h2>\n                  </Col>\n                  {\n                    Object.values(primaryColor).map((primary,key)=>{\n                      return (\n                        <Col \n                          sm={{span: 1, offset: 1}}\n                          lg={{span: 1, offset: 1}}\n                          md={{span: 1, offset: 1}}\n                          key={key}\n                          onClick={()=>{editColor(primary)}}\n                          style={{display: 'flex', cursor: 'pointer',backgroundColor: primary.color_code, height: 50, borderRadius: 50, width: 50, alignItems: 'center', justifyContent: 'center'}}\n                        >\n                          <span>{primary.color_name.charAt(0)}</span>\n                        </Col>\n                      )\n                    })\n                  }\n                </Row>\n              </Container>\n            </Card.Body>\n          </Card>\n      }\n  \n      <Container>\n        <Row>\n          <Col sm={12} md={4} lg={6}>\n            <Form onSubmit={()=>{registerColor()}}>\n              <FloatingLabel\n                controlId=\"floatingInput\"\n                label=\"Color Name\"\n                className=\"mb-3\"\n              >\n                <Form.Control \n                  name=\"color_name\" \n                  type=\"text\" \n                  placeholder=\"Color Name\" \n                  onChange={(e)=> {handleChange(e)}} \n                  defaultValue={selectColorLength > 0 ? selectedColor.color_name : \"\"}\n                />\n              </FloatingLabel>\n\n              <Form.Check \n                type=\"switch\"\n                id=\"custom-switch\"\n                label=\"Is Primary ?\"\n                name=\"is_popular\"\n                //checked={selectColorLength > 0 ? selectedColor.is_popular : false}\n                onChange={(e)=> {handleChange(e)}}\n              />\n\n              <FloatingLabel controlId=\"floatingPassword\" label=\"Color code\">\n                <Form.Control \n                  name=\"color_code\" \n                  type=\"text\" \n                  placeholder=\"Color Code\" \n                  onChange={(e)=> {handleChange(e)}} \n                  defaultValue={selectColorLength > 0 ? selectedColor.color_code: \"\"}\n                />\n              </FloatingLabel>\n\n              <Button variant=\"primary\" type=\"submit\">\n                {selectColorLength > 0 ? \"Update\" : \"Register\"}\n              </Button>\n            </Form>\n          </Col>\n\n          <Col sm={12} md={8} lg={6}>\n            <Container>\n              <Table striped>\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th></th>\n                    <th>Color Name</th>\n                    <th>Is Primary ?</th>\n                    <th colSpan=\"2\">Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    Object.values(colors).length > 0 &&\n                      Object.values(colors).map((color,key)=>{ \n                        return (\n                          <tr key={key}>\n                            <td>{key + 1}.</td>\n                            <td><div style={{backgroundColor: color.color_code, height: 20, borderRadius: 50, width: 20}}></div></td>\n                            <td>{color.color_name}</td>\n                            <td>{color.is_popular === true ? \"True\" : \"False\"}</td>\n                            <td>\n                              <Button variant=\"success\" type=\"submit\" onClick={()=>{editColor(color)}}>\n                                Edit\n                              </Button>\n                            </td>\n                            <td>\n                              <Button variant=\"danger\" type=\"submit\" onClick={()=>{DeleteColor(color.color_name)}}>\n                                Delete\n                              </Button>\n                            </td>\n                          </tr>\n                        )\n                      })\n                  }\n                </tbody>\n              </Table>\n            </Container>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"21","severity":1,"message":"22","line":65,"column":45,"nodeType":"23","messageId":"24","endLine":65,"endColumn":66,"fix":"25"},{"ruleId":"26","severity":1,"message":"27","line":110,"column":5,"nodeType":"28","messageId":"29","endLine":150,"endColumn":6},"no-useless-computed-key","Unnecessarily computed property ['is_popular'] found.","Property","unnecessarilyComputedProperty",{"range":"30","text":"31"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",[2041,2055],"'is_popular'"]