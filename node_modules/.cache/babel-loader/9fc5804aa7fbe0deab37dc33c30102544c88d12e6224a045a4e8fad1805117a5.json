{"ast":null,"code":"var _jsxFileName = \"/home/jayan/React/colors/src/Components/Movie/detail.jsx\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useFetch } from '../../Hooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieDetail() {\n  _s();\n  const params = useParams();\n  let imdb_id = params.movieId;\n  let url = `https://yts.torrentbay.to/api/v2/movie_details.json?imdb_id=${imdb_id}`;\n  let data = useFetch(url);\n  console.log(\"data\", data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieDetail, \"0J0QqNN3jBAyFTI8BmmcLQqnWuo=\", false, function () {\n  return [useParams, useFetch];\n});\n_c = MovieDetail;\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  body: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  inner: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    flexWrap: 'wrap'\n  },\n  leftContainer: {\n    display: 'flex',\n    flex: 1,\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  rightContainer: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    padding: 10\n  }\n};\nexport default MovieDetail;\nvar _c;\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"names":["useParams","useState","useFetch","jsxDEV","_jsxDEV","MovieDetail","_s","params","imdb_id","movieId","url","data","console","log","style","styles","container","fileName","_jsxFileName","lineNumber","columnNumber","_c","display","flexDirection","alignItems","justifyContent","flexWrap","body","inner","leftContainer","flex","rightContainer","padding","$RefreshReg$"],"sources":["/home/jayan/React/colors/src/Components/Movie/detail.jsx"],"sourcesContent":["import {useParams} from 'react-router-dom';\nimport {useState} from 'react';\nimport {useFetch} from '../../Hooks/useFetch';\n\nfunction MovieDetail(){\n    const params = useParams();\n    let imdb_id = params.movieId;\n\n    let url = `https://yts.torrentbay.to/api/v2/movie_details.json?imdb_id=${imdb_id}`;\n    let data = useFetch(url);\n\n    console.log(\"data\",data);\n    return (\n        <div style={styles.container}>\n        {/* {\n            data !== undefined ?\n                Object.values(data).length > 0 ?\n                    <>\n                        <div style={styles.body}>\n                            <div style={styles.leftContainer}>\n                                <img    \n                                    src={`${data.data.movie.large_cover_image}`}\n                                    style={{objectFit: 'cover'}}\n                                />\n                            </div>\n\n                            <div style={styles.rightContainer}>\n                                <div style={styles.inner}>\n                                    <div style={styles.leftContainer}>\n                                        <h1>{data.data.movie.title}</h1>\n                                        <p>Rating: {data.data.movie.rating} </p>\n                                        <p>Year: {data.data.movie.year} </p>\n                                        <p>Genre: \n                                            {\n                                                data.data.movie.genres.map((genre,key)=>{\n                                                    return (\n                                                        <span key={key}> {genre}\n                                                            {\n                                                                (data.data.movie.genres.length > 0 && data.data.movie.genres.length - 1 !== key) &&\n                                                                    <span>,</span>\n                                                            }\n                                                        </span>\n                                                    )\n                                                })\n                                            }\n                                        </p>\n                                    </div>\n\n                                    <div style={styles.rightContainer}>\n                                        <img    \n                                            src={`${data.data.movie.medium_cover_image}`}\n                                            style={{objectFit: 'cover'}}\n                                            width={100}\n                                            height={150}\n                                        />\n                                    </div>\n                                </div>\n                                <p>{data.data.movie.description_full}</p>\n                            </div>\n                        </div>\n                    </>\n                :\n                    <p>Loading ...</p>\n            :\n                <p>Loading ...</p>\n        } */}\n        </div>\n    )\n}\n\nconst styles={\n    container:{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n    body: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n    inner: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n        justifyContent: 'space-between',\n        flexWrap: 'wrap',\n    },\n    leftContainer: {\n        display: 'flex',\n        flex: 1,\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        flexDirection: 'column',\n    },\n    rightContainer: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        padding: 10,\n    }\n}\n\nexport default MovieDetail;  "],"mappings":";;AAAA,SAAQA,SAAS,QAAO,kBAAkB;AAC1C,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAAQC,QAAQ,QAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,WAAWA,CAAA,EAAE;EAAAC,EAAA;EAClB,MAAMC,MAAM,GAAGP,SAAS,EAAE;EAC1B,IAAIQ,OAAO,GAAGD,MAAM,CAACE,OAAO;EAE5B,IAAIC,GAAG,GAAI,+DAA8DF,OAAQ,EAAC;EAClF,IAAIG,IAAI,GAAGT,QAAQ,CAACQ,GAAG,CAAC;EAExBE,OAAO,CAACC,GAAG,CAAC,MAAM,EAACF,IAAI,CAAC;EACxB,oBACIP,OAAA;IAAKU,KAAK,EAAEC,MAAM,CAACC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAqDvB;AAEd;AAACd,EAAA,CAhEQD,WAAW;EAAA,QACDL,SAAS,EAIbE,QAAQ;AAAA;AAAAmB,EAAA,GALdhB,WAAW;AAkEpB,MAAMU,MAAM,GAAC;EACTC,SAAS,EAAC;IACNM,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,QAAQ,EAAE;EACd,CAAC;EACDC,IAAI,EAAE;IACFL,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,YAAY;IACxBC,cAAc,EAAE,QAAQ;IACxBC,QAAQ,EAAE;EACd,CAAC;EACDE,KAAK,EAAE;IACHN,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,YAAY;IACxBC,cAAc,EAAE,eAAe;IAC/BC,QAAQ,EAAE;EACd,CAAC;EACDG,aAAa,EAAE;IACXP,OAAO,EAAE,MAAM;IACfQ,IAAI,EAAE,CAAC;IACPN,UAAU,EAAE,YAAY;IACxBC,cAAc,EAAE,QAAQ;IACxBF,aAAa,EAAE;EACnB,CAAC;EACDQ,cAAc,EAAE;IACZD,IAAI,EAAE,CAAC;IACPR,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,YAAY;IACxBC,cAAc,EAAE,YAAY;IAC5BO,OAAO,EAAE;EACb;AACJ,CAAC;AAED,eAAe3B,WAAW;AAAC,IAAAgB,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}